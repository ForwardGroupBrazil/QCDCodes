process EDMtoMEConvert =
{
    untracked PSet maxEvents = {untracked int32 input = -1}
    
    ## setup useful services
    ##
    include "FWCore/MessageService/data/MessageLogger.cfi"
    replace MessageLogger.categories = {}
    replace MessageLogger.FrameworkJobReport.FwkJob.limit = 0  
    replace MessageLogger.cerr.FwkReport.limit = 0  

    ## Read in EDM file produced with MEtoEDMConverter info
    source = PoolSource
    {
	untracked uint32 skipEvents = 0
	untracked vstring fileNames = { }
    }
    #inputFileBlock
    
    ##module EDMtoMEConverter
    include "DQMServices/Components/data/EDMtoMEConverter.cff"
    replace EDMtoMEConverter.convertOnEndRun = true

    replace DQMStore.referenceFileName = ""

    //for standard running
    include "DQMServices/Components/data/DQMEnvironment.cfi"
    replace dqmSaver.convention = "RelVal"
    replace dqmSaver.workflow = "/Validation/Test/RECO"
    ////replace dqmSaver.fileName = "RecoMuonV.root"
    ////replace dqmSaver.saveAtRunEnd = false
    //replace dqmSaver.saveAtJobEnd = true
    //replace dqmSaver.saveByRun    = -1
    //replace dqmSaver.forceRunNumber    = 1

    //for simulation validation running
    //replace dqmSaver.saveAsValidation = true 
    //replace dqmSaver.dataset = "ZMM" //this needs to be
                                             //reset to a value 
                                             //that is indicative 
                                             //of the dataset
                                             //source   

    module postProcessor = PostProcessor {
        vstring commands = {
	    "RecoMuonV/MultiTrack R v_cotThetares_eta 'Res(cot(#theta)) vs #eta' 'cotThetares_vs_eta'",
    "RecoMuonV/MultiTrack R v_cotThetares_pt 'Res(cot(#theta)) vs pt' 'cotThetares_vs_pt'",
    
    "RecoMuonV/MultiTrack R v_dxy_Pull_eta 'Pull(dxy) vs #eta' 'dxypull_vs_eta'",
    "RecoMuonV/MultiTrack R v_dxy_Resolution_eta 'Res(dxy) vs #eta' 'dxyres_vs_eta'",
    "RecoMuonV/MultiTrack R v_dxy_Pull_pt 'Pull(dxy) vs pt' 'dxypull_vs_pt'",
    "RecoMuonV/MultiTrack R v_dxy_Resolution_pt 'Res(dxy) vs pt' 'dxyres_vs_pt'",
    
    "RecoMuonV/MultiTrack R v_dz_Pull_eta 'Pull(dz) vs #eta' 'dzpull_vs_eta'",
    "RecoMuonV/MultiTrack R v_dz_Resolution_eta 'Res(dz) vs #eta' 'dzres_vs_eta'",
    "RecoMuonV/MultiTrack R v_dz_Resolution_pt 'Res(dz) vs pt' 'dzres_vs_pt'",
    
    "RecoMuonV/MultiTrack R v_eta_Resolution_eta 'Res(#eta) vs #eta' 'etares_vs_eta'",
    
    "RecoMuonV/MultiTrack R v_phi_Pull_eta 'Pull(#phi) vs #eta' 'phipull_vs_eta'",
    "RecoMuonV/MultiTrack R v_phi_Resolution_eta 'Res(#phi) vs #eta' 'phires_vs_eta'",
    "RecoMuonV/MultiTrack R v_phi_Resolution_pt 'Res(#phi) vs pt' 'phires_vs_pt'",
    
    "RecoMuonV/MultiTrack R v_Pt_Pull_eta 'Pull(pt) vs #eta' 'ptpull_vs_eta'",
    "RecoMuonV/MultiTrack R v_Pt_Resolution_eta 'Res(pt) vs #eta' 'ptres_vs_eta'",
    "RecoMuonV/MultiTrack R v_Pt_Resolution_pt 'Res(pt) vs pt' 'ptres_vs_pt'",
    
    "RecoMuonV/MultiTrack R v_theta_Pull_eta 'Pull(#theta) vs #eta' 'thetapull_vs_eta'",
    
    "RecoMuonV/MultiTrack E v_Efficiency_eta 'Efficiency Plot vs #eta' 'num_assoc(simToReco)_eta' 'num_simul_eta'",
    "RecoMuonV/MultiTrack E v_Efficiency_pt 'Efficiency Plot vs pt' 'num_assoc(simToReco)_pT' 'num_simul_pT'",
    "RecoMuonV/MultiTrack E v_Efficiency_hit 'Efficiency Plot vs hits' 'num_assoc(simToReco)_hit' 'num_simul_hit'",
    
    "RecoMuonV/MultiTrack E v_Fake_eta 'Fake Plot vs #eta' 'num_assoc(recoToSim)_eta' 'num_reco_eta'",
    "RecoMuonV/MultiTrack E v_Fake_pt 'Fake Plot vs pt' 'num_assoc(recoToSim)_pT' 'num_reco_pT'",
    "RecoMuonV/MultiTrack E v_Fake_hit 'Fake Plot vs hits' 'num_assoc(recoToSim)_hit' 'num_reco_hit'"
    
}
untracked string subDir = "RecoMuonV/MultiTrack"
        ## Leave outputFileName to be Null string 
        ## if don't want to save histograms manually
        ## untracked string outputFileName = "" 
        untracked string outputFileName = "$outFileName_post.root"
    }

    ## execute path
    ##
    //path p1 = { EDMtoMEConverter, dqmSaver } 
    path p1 = { EDMtoMEConverter, postProcessor , dqmSaver }
}
