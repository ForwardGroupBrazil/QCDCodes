#!/bin/csh -f
#
#########################################################################
#
# This script generates a batch job script that can be fed into
# LSF  as in:  bsub < created_script
#
# arg1 job name
# arg2 maximum number of events to process
# arg3 job number
#
#########################################################################
#
setenv ARG1 $1
setenv ARG2 $2
setenv ARG3 $3
set FIRSTEVENT = 0
@ FIRSTEVENT = ${ARG2} * (${ARG3} - 1)

set RANDOM = 0
@ RANDOM = ${FIRSTEVENT} + 123456789

# number of events to process per file (-1 = all)
setenv MAXEVENTS ${ARG2}

setenv basename ${ARG1}_${ARG3}
setenv fname ${basename}.job

echo Job file will be ${fname}

cat - > ${fname} <<EOF
#!/bin/csh -f
# LSF parameters
#
#BSUB -q cmsprs
#BSUB -R "mem > 256"
#BSUB -u aeverett@purdue.edu 
#BSUB -o /afs/cern.ch/user/a/aeverett/scratch0/output/${basename}.log
#BSUB -J ${basename}
#
# ---------------------------------------------------------
#
set nonomatch

echo ""
echo "Job is running on \`uname -a\`"
if ( \${OS} == "Linux" ) then
  set processor = \`sort /proc/cpuinfo | uniq | gawk -F: '(substr(\$1,1,10)=="model name"){print \$2}'\`
  set rate = \`sort /proc/cpuinfo | uniq | gawk -F: '(substr(\$1,1,7)=="cpu MHz"){print substr(\$2,1,6)}'\`
  echo "Processor info : " \$processor \$rate "MHz"
endif
echo "Job started on \`date\`"
echo ""

echo " "
echo "Workdir is : " \$WORKDIR
echo " "
echo "Job has been submitted from : " \$LS_SUBCWD

if ( \${OS} != "Solaris" && \${OS} != "Linux" ) exit

setenv OS_VERS slc3_ia32_gcc323

#
#----------------------------------------------------------
# s e t   t h e   r u n t i m e   e n v i r o n m e n t
#----------------------------------------------------------
#

setenv CMSSW_RELEASE CMSSW_2006-11-16
setenv SCRAM_ARCH slc3_ia32_gcc323

setenv SRCDIR   /afs/cern.ch/user/a/aeverett/scratch0/\${CMSSW_RELEASE}
#setenv OUTDIR   /afs/cern.ch/user/a/aeverett/scratch0/output
setenv OUTDIR   /castor/cern.ch/user/a/aeverett/output

echo " "
echo "Output directory is : " \$OUTDIR
echo " "

#
#----------------------------------------------------------
# s e t   t h e   r u n t i m e   e n v i r o n m e n t
#----------------------------------------------------------
#

cd \${SRCDIR}/src
eval \`scramv1 runtime -csh\` 

#
#----------------------------------------------------------
# c o p y   e x e   a n d   c o n f i g    f i l e s
#----------------------------------------------------------
#

cd \${WORKDIR}

#
#----------------------------------------------------------
# set CMSSW environment
#----------------------------------------------------------
#
/bin/rm -f job.cfg
cat > job.cfg <<@EOF
process SimDigiReco = {
###############################
# Some Services
  include "Configuration/ReleaseValidation/data/Services.cfi"


  ###############################
  # MessageLogger
  include "Configuration/Examples/data/MessageLogger.cfi"


  ###############################
  # Random Number Generator
  service = RandomNumberGeneratorService
  {
    untracked uint32 sourceSeed = ${RANDOM}
    PSet moduleSeeds =
      {
         untracked uint32 VtxSmeared = 123456789
         untracked uint32 g4SimHits = 98765
         untracked uint32 mix = 965
      }
  }

     ##########
     # This needs to be included or else you get
     # "no PDTRecord" exception when running
     #
     include "SimGeneral/HepPDTESSource/data/pdt.cfi"

###############################
# Input Module:

#include "IOMC/GeneratorInterface/data/PythiaHZZ4mu.cff"
#replace PythiaSource.maxEvents = ${MAXEVENTS}

#include "UserCode/AEverett/MyGenerators/data/source/source_ttbar.cff"
#replace PythiaSource.maxEvents = ${MAXEVENTS}

include "UserCode/AEverett/MyGenerators/data/source/source_single_mu_pt_10_100_negative.cff"
replace  FlatRandomPtGunSource.maxEvents = ${MAXEVENTS}


###############################
# Output Module:
  include "UserCode/AEverett/MyGenerators/data/DropSimCalStuff.cfi"
  include "Configuration/Examples/data/DropTrackingIntermediateStuff.cff"

  module GEN-SIM-DIGI-RECO = PoolOutputModule {
      untracked string fileName = "reco.root"
      #using DropSimCalStuff
      using DropTrackingIntermediateStuff
  }

###############################
# Simulation and Digitization

  #########
  # Run Simulation and Digitization
  #
  include "Configuration/StandardSequences/data/Simulation.cff"

  sequence doAllDigi_noCAL = { trDigi & muonDigi }

  ##########
  # Mixing Module
  #
  include "Configuration/StandardSequences/data/MixingNoPileUp.cff"

  ##########
  # L1Emulation
  #
  include "L1Trigger/GlobalMuonTrigger/data/l1muon.cff"

  #########
  # Reconstruction
  #
  include "Configuration/StandardSequences/data/Reconstruction.cff"
 
  sequence localreco_noCAL = { trackerlocalreco & muonlocalreco }
  sequence globalreco_noCAL = { ckftracks, rstracks, muonreco }
  sequence highlevelreco_noCAL = {
				recopixelvertexing, 
				vertexreco
           }
  sequence reconstruction_noCAL = {
                                 localreco_noCAL,
 				 globalreco_noCAL,
 				 highlevelreco_noCAL
           }
 


###############################
# now define what you want to do

  #path p = { psim, mix, pdigi, l1muon, reconstruction}
  path p = { psim, mix, doAllDigi_noCAL, l1muon, reconstruction_noCAL}

  endpath outpath = {GEN-SIM-DIGI-RECO}	

}
@EOF

#
#----------------------------------------------------------
# e x e c u t e   j o b
#----------------------------------------------------------
#

   echo "Processing Event Collection : $basename  " 

   time cmsRun -p job.cfg

#
#----------------------------------------------------------
# c o p y   o u t p u t
#----------------------------------------------------------
#
#    rfcp \${WORKDIR}/muonreconstruction.ntup  shift19:/shift/shift19/data2/zh/incoming/${basename}.ntup
#    if ( \${status} != 0 ) cp \${WORKDIR}/muonreconstruction.ntup \${OUTDIR}/${basename}.ntup
#    cp \${WORKDIR}/*.root \${OUTDIR}/${basename}.root
    rfcp \${WORKDIR}/*.root \${OUTDIR}/${basename}.root
    rfcp \${WORKDIR}/*.out \${OUTDIR}/${basename}.out
   
#
# show what is being left behind...
#
  echo ""
  echo "Current directory:"
  pwd
  ls -lrtAFh
#
  echo ""
  echo "Job end \`date\`"
  echo ""
#
exit \${status}
EOF

chmod +x ${fname}
